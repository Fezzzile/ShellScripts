#! /usr/bin/sh

# Losslessly compress JPEG pictures.

jpg="$1" # Only one input supported for now. TODO: Add *jpg expansion support.
argc=$#

# Change extension from .jpg to .jxl
jxl="$(echo $jpg|awk '{gsub(".jpg", ".jxl"); print}')"

if [ $argc -lt 1 ]
then
	echo "Usage: \n\t$0 [JPEG file]"
	exit 1
fi

cjxl --quiet --lossless_jpeg=1 --jpeg_store_metadata=1 "$jpg" "$jxl" && echo -n " '$jpg' ($(du -h "$jpg"|cut -f 1)) → '$jxl'"
# Since I ignore the digits after ".", the result is a floor.
# bc: Changing the scale, to reduce the number of digits after ".", massively affects the accuracy.
# I have to read more documentation, but this will do for now.
echo " [lossless, $(du -h "$jxl"|cut -f 1) (−$(echo "100 * (1 - $(du -b "$jxl"|cut -f 1) / $(du -b "$jpg"|cut -f 1))"|bc -l|cut -d "." -f1)%)]"

# Copy access and modification times from the JPEG
touch -r "$jpg" "$jxl"

## How to reconstruct JPEG
# djxl image.jxl image.jpg
#
# The checksum (eg md5sum) of the new JPEG should be the same as the original JPEG file.

## Known issues/bugs:
# Even if `--losless_jpeg=1` is passed to cjxl
# but the input file is not a JPEG, possibly a PNG mislabeled as a JPEG in the extension (the Twitter/X Android app does this),
# the file will be encoded nonetheless,
# and a warning will be sent to stderr.
#
# What is frustrating is the fact that the process will end with exit code 0.
# Now try reconstructing the "JPEG",
# "Warning: could not decode losslessly to JPEG." is sent to stderr.
# Again, with exit code 0.
# I think this should be an error, not a warning.
#
# And when I convert the original JPEG and the JXL to PPM,
# and compare the checksums of the PPMs, the checksums mismatch,
# confirming that the file was not converted losslessly.
#
# A possible solution is to confirm that the input file is indeed a JPEG
# with ExifTool/file before compressing (this script does not do that, yet).
#
# Perhaps I should write my own encoder and use libjxl directly!

# TODO:
# Compress any JPEG file regardless of extension; for now only .jpg works.
